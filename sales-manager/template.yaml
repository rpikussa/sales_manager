AWSTemplateFormatVersion: 2010-09-09
Description: >-
  sales-manager
Transform:
- AWS::Serverless-2016-10-31

Resources:
  # -------------
  # Ingredient functions
  # -------------
  ManageIngredientFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: ManageIngredient
      Handler: src/ingredient/ingredient.handler
      Runtime: nodejs20.x
      FunctionUrlConfig:
        AuthType: NONE
      Architectures:
      - x86_64
      MemorySize: 128
      Timeout: 10
      Description: Saves an ingredient to database
      Policies: 
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: arn:aws:secretsmanager:us-east-1:975050294854:secret:rds!db-40cc679a-fa7f-4db8-8e92-8a774bece408-NS9ggO
      VpcConfig:
        SecurityGroupIds:
          - sg-0b233602b92cd70f7
          - sg-0dd05095cd5969f99
          - sg-04e86fcb5d64f05f3
        SubnetIds:
          - subnet-08ba2630ed2ad5086
          - subnet-0a22fbe0af86e0a37
          - subnet-0be71766173a5d34a
          - subnet-0f692d61e6b80a341
          - subnet-0a1beb2d590107236
          - subnet-021e9ce96b9235bf7
      Events:
        IngredientGetHttpApi:
          Type: HttpApi
          Properties:
            Path: /ingredient/{id}
            Method: GET

        IngredientPostHttpApi:
          Type: HttpApi
          Properties:
            Path: /ingredient
            Method: POST

  
  # -------------
  # Product functions
  # -------------
  ManageProductFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: ManageProduct
      Handler: src/product/product.handler
      Runtime: nodejs20.x
      FunctionUrlConfig:
        AuthType: NONE
      Architectures:
      - x86_64
      MemorySize: 128
      Timeout: 100
      Description: Saves a product and its related data to database
      Policies: 
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: arn:aws:secretsmanager:us-east-1:975050294854:secret:rds!db-40cc679a-fa7f-4db8-8e92-8a774bece408-NS9ggO
      VpcConfig:
        SecurityGroupIds:
          - sg-0b233602b92cd70f7
          - sg-0dd05095cd5969f99
          - sg-04e86fcb5d64f05f3
        SubnetIds:
          - subnet-08ba2630ed2ad5086
          - subnet-0a22fbe0af86e0a37
          - subnet-0be71766173a5d34a
          - subnet-0f692d61e6b80a341
          - subnet-0a1beb2d590107236
          - subnet-021e9ce96b9235bf7
      Events:
        ProductGetHttpApi:
          Type: HttpApi
          Properties:
            Path: /product/{id}
            Method: GET

        ProductPostHttpApi:
          Type: HttpApi
          Properties:
            Path: /product
            Method: POST
            
  
  # -------------
  # ------------- 


#Outputs:
#  HttpApiUrl:
#    Description: URL of your API endpoint
#    Value:
#      Fn::Sub: 'https://${ApiGatewayApi}.execute-api.${AWS::Region}.${AWS::URLSuffix}/${StageName}/'
#  HttpApiId:
#    Description: Api id of HttpApi
#    Value:
#      Ref: ApiGatewayApi

#Outputs:
#  FunctionUrlEndpoint:
#      Description: "My Lambda Function URL Endpoint"
#      Value:
#        Fn::GetAtt: ManageProductFunctionUrl.FunctionUrl

Globals:
  Function:
    LoggingConfig:
      LogFormat: JSON
    Environment:
      Variables:
        REGION_NAME: "us-east-1"
        POSTGRES_HOST: "sales-manager.cjg402isk8rb.us-east-1.rds.amazonaws.com"
        POSTGRES_DATABASE: "postgres"
        POSTGRES_PASSWORD: "e8(R*3brH[_:6r?%okK>gz9PF3UU"
        POSTGRES_USER: "postgres"
        POSTGRES_PORT: 5432
    #VpcConfig:
        #SecurityGroupIds:
        #  - sg-0b233602b92cd70f7
        #  - sg-04e86fcb5d64f05f3
        #  - sg-07214d32a9a6eff3f
        #  - sg-0dd05095cd5969f99
        #SubnetIds:
        #  - subnet-08ba2630ed2ad5086
        #  - subnet-0a22fbe0af86e0a37
        #  - subnet-0be71766173a5d34a
        #  - subnet-0f692d61e6b80a341
        #  - subnet-0a1beb2d590107236
        #  - subnet-021e9ce96b9235bf7
